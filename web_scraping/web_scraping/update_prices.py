# for updateing the prices collection, if anything changed (prices changed or new item appeared)

import pandas as pd, numpy as np, json

# prices_old.json is from the database prices collection
df_old=pd.read_json("prices_old.json", lines=True)
df_new=pd.read_json("prices.json", lines=True)

# dropping the id generated by mongodb
df_old=df_old.drop('_id',axis=1)

# rename the columns that could changed
df_new=df_new.rename(columns={'emag_price':'emag_new_price','pc_garage_price':'pc_garage_new_price','cel_price':'cel_new_price','flanco_price':'flanco_new_price','date':'new_date'})

# checking if there's any new data or anything changed from old
df_updated=pd.merge(df_old, df_new, on=['id','name'], how="left")
df_new_prices=pd.merge(df_old[['name']],df_new,on=['name'],how="right", indicator=True).query('_merge=="right_only"')
df_new_prices=df_new_prices.drop(columns={"_merge"})

# if the prices changed, and if it's not Nan (Nan's are never equal)
df_filtered=df_updated[((df_updated.emag_price != df_updated.emag_new_price) & 
                           ((df_updated.emag_price.notnull() ) & (df_updated.emag_new_price.notnull() )))
| ((df_updated.pc_garage_price != df_updated.pc_garage_price) & 
   ((df_updated.pc_garage_price.notnull() ) & (df_updated.pc_garage_price.notnull() )))
| ((df_updated.cel_price != df_updated.cel_new_price) &
   ((df_updated.cel_price.notnull() ) & (df_updated.cel_new_price.notnull() )))
| ((df_updated.flanco_price != df_updated.flanco_new_price) &
   ((df_updated.flanco_price.notnull() ) & (df_updated.flanco_new_price.notnull() )))]

# keep only what's new (df_filtered contains the old items with price changes)
df_filtered=df_filtered.drop(columns={'emag_price','pc_garage_price','cel_price','flanco_price','date'})
df_filtered=df_filtered.rename(columns={'emag_new_price':'emag_price','pc_garage_new_price':'pc_garage_price','cel_new_price':'cel_price','flanco_new_price':'flanco_price','new_date':'date'})

# df_new_prices contains the new items 
df_new_prices=df_new_prices.rename(columns={'emag_new_price':'emag_price','pc_garage_new_price':'pc_garage_price','cel_new_price':'cel_price','flanco_new_price':'flanco_price','new_date':'date'})
df_new_prices=df_new_prices[['id','name','emag_price','pc_garage_price','cel_price','flanco_price','date']]

# concat the two dataframes and save into one json
df_filtered=pd.concat([df_filtered,df_new_prices], axis=0, ignore_index=True)
df_filtered.to_json('prices.json', orient='records', lines=True)